- include: standard.yml
  when: _apb_plan_id == "standard"

- include: fifo.yml
  when: _apb_plan_id == "fifo"

- name: Create SQS IAM user
  iam:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    iam_type: user
    name: "apb-sqs-iam-{{ stack_identifier }}"
    state: present
    access_key_state: create
  register: iam_output
  when: state == 'present'

- name: Attach SQS access IAM policy
  iam_policy:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    iam_type: user
    iam_name: "apb-sqs-iam-{{ stack_identifier }}"
    policy_name: "SQSFullAccessPolicy"
    state: present
    policy_document: "{{ role_path }}/files/SQSFullAccessPolicy.json"
  when: state == 'present'

- name: Remove SQS access IAM policy
  iam_policy:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    iam_type: user
    iam_name: "apb-sqs-iam-{{ stack_identifier }}"
    policy_name: "SQSFullAccessPolicy"
    state: absent
  when: state == 'absent'

- name: Remove SQS IAM user
  iam:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    iam_type: user
    name: "apb-sqs-iam-{{ stack_identifier }}"
    state: absent
  when: state == 'absent'

- name: Check for CloudFormation error logs
  debug:
    var: sqs.log

- name: Encode bind credentials
  asb_encode_binding:
    fields:
      AWS_SQS_QUEUE_ARN:  "{{ sqs_queue_arn }}"
      AWS_SQS_QUEUE_NAME: "{{ sqs_queue_name }}"
      AWS_SQS_QUEUE_URL:  "{{ sqs_queue_url }}"
      AWS_ACCESS_KEY:     "{{ iam_output.user_meta.access_keys[0].access_key_id }}"
      AWS_SECRET_KEY:     "{{ iam_output.user_meta.access_keys[0].secret_access_key }}"
      AWS_REGION:         "{{ region }}"
  when: state == 'present'
