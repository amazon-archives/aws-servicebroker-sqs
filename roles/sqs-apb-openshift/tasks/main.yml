---
- name: include plan vars
  include_vars:
    file: "{{ _apb_plan_id }}.yml"
- name: generate b62 hash
  shell: "16to62 {{ params_hash }}"
  register: command_output
- name: set fact
  set_fact:
    stack_suffix: "{{ command_output.stdout }}"
- name: Log stack suffix
  debug:
    msg: "stack_suffix: {{ stack_suffix }}"

- include: standard.yml
  when: _apb_plan_id == "sqs-standard"

- include: fifo.yml
  when: _apb_plan_id == "sqs-fifo"

- name: Create SQS IAM user
  iam:
    iam_type: user
    name: "apb-sqs-iam-{{ stack_suffix }}"
    state: present
    access_key_state: create
  register: iam_output
  when: state == 'present'

- name: Generate IAM policy temporary json file
  template:
    src: "{{ role_path }}/files/SQSAccessPolicy.json.j2"
    dest: "/tmp/{{ stack_suffix }}.json"

- name: Attach SQS access IAM policy
  iam_policy:
    iam_type: user
    iam_name: "apb-sqs-iam-{{ stack_suffix }}"
    policy_name: "SQSAccessPolicy"
    state: present
    policy_document: "/tmp/{{ stack_suffix }}.json"
  when: state == 'present'

- name: Remove SQS access IAM policy
  iam_policy:
    iam_type: user
    iam_name: "apb-sqs-iam-{{ stack_suffix }}"
    policy_name: "SQSAccessPolicy"
    state: absent
  when: state == 'absent'

- name: Remove SQS IAM user
  iam:
    iam_type: user
    name: "apb-sqs-iam-{{ stack_suffix }}"
    state: absent
  when: state == 'absent'

- name: Check for CloudFormation error logs
  debug:
    var: sqs.log

- name: Encode bind credentials
  asb_encode_binding:
    fields:
      SQS_QUEUE_ARN:             "{{ sqs_queue_arn }}"
      SQS_QUEUE_NAME:            "{{ sqs_queue_name }}"
      SQS_QUEUE_URL:             "{{ sqs_queue_url }}"
      SQS_AWS_ACCESS_KEY_ID:     "{{ iam_output.user_meta.access_keys[0].access_key_id }}"
      SQS_AWS_SECRET_ACCESS_KEY: "{{ iam_output.user_meta.access_keys[0].secret_access_key }}"
      SQS_REGION:                "{{ region }}"
  when: iam_output.user_meta is defined
